{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"axios\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/utils/Promisable.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abi_abiCoder","external_ethers_","AbiCoder","decodeParams","names","types","ignoreMethodHash","obj","arg","index","substr","toLowerCase","encodeParams","values","src_TronWeb","toHex","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","res","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","abi_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","Promisable_Promisable","Promisable","injectPromise","promiseInjector","func","args","Promise","resolve","reject","err","scope","preArgs","keys","injectPromiseStatic","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","possibleConstructorReturn_default","getPrototypeOf_default","to","from","defaultAddress","callback","isAddress","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","_this2","votes","voterAddress","vote","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","abiCoder","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","_this3","triggerSmartContract","_parameters$i","function_selector","message","toUtf8","_this4","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","accountName","account_name","updateAccount","_this5","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this6","createProposal","_this7","proposalID","proposal_id","deleteProposal","_this8","hasApproval","is_add_approval","isApproval","voteProposal","_this9","exchangeID","tokenName","tokenAmount","ownerAddress","exchange_id","token_id","fromAscii","quant","injectExchangeTokens","_this10","withdrawExchangeTokens","_this11","tokenAmountSold","tokenAmountExpected","expected","tradeExchangeTokens","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","_args","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","useTronHeader","verifyMessage","_args2","messageBytes","toUtf8Bytes","messageDigest","keccak256","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","_args3","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","sendRawTransaction","sendTransaction","_args4","transactionBuilder","_context4","_args5","_context5","_context6","_context7","_args8","_context8","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$chainParameter","chainParameter","resources","getAccountResources","exchange","getExchangeByID","listExchanges","_ref16","_ref16$exchanges","exchanges","firstTokenID","firstTokenBalance","secondTokenID","secondTokenBalance","first_token_id","first_token_balance","second_token_id","second_token_balance","_ref17","_ref17$exchanges","getFunctionSelector","getParamTypes","method_decodeOutput","filter","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","_len2","methodArgs","_key2","_call","send","_len3","_key3","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","regenerator_default","wrap","_context2","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","RegExp","test","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","assertThisInitialized_default","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","blockNumber","routeParams","response","getEventByTransacionID","val","fromDecimal","typeof_default","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","external_eventemitter3_default"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"axios\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/,'').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/,'').substring(8);\n\n    if (output.replace(/^0x/,'').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i =0;i<types.length;i++) {\n        if (types[i] === 'address') {\n            values[i] =  TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while(res.length < amount)\n            res = padding + res;\n\n        return res;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/,'');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};\n","export default class Promisable {\n\n    constructor() {\n        this.injectPromise = Promisable.promiseInjector(this);\n    }\n\n\n    static injectPromiseStatic(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if (err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    }\n\n    static promiseInjector(scope) {\n        return (func, preArgs) => {\n            let args = [];\n            const len = Object.keys(preArgs).length;\n            for (let i = 0; i < len; i++) {\n                if (i === len - 1 && (typeof preArgs[i.toString()] === 'undefined' || typeof preArgs[i.toString()] === 'function'))\n                    break;\n                args.push(preArgs[i.toString()]);\n            }\n            return Promisable.injectPromiseStatic(func.bind(scope), ...args);\n        }\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\nimport Promisable from 'utils/Promisable';\n\nexport default class TransactionBuilder extends Promisable {\n    constructor(tronWeb = false) {\n        super();\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, arguments);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, arguments);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, arguments);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, arguments);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, arguments);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, arguments);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, arguments);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, arguments);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, arguments);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = [],\n            name = \"\",\n        } = options;\n        \n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.triggerSmartContract, arguments);\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, arguments);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false)\n    {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, arguments);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.tronWeb.fromUtf8(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => {\n\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, arguments);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, arguments);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.deleteProposal, arguments);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, hasApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, arguments);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(hasApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval.toString()\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, arguments);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, arguments);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     */\n    tradeExchangeTokens(exchangeID = false, \n        tokenName = false, \n        tokenAmountSold = 0, \n        tokenAmountExpected = 0, \n        ownerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, arguments);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant:parseInt(tokenAmountSold),\n            expected:parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\nimport Promisable from 'utils/Promisable';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx extends Promisable{\n    constructor(tronWeb = false) {\n        super();\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock, arguments);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, arguments);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, arguments);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, arguments);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, arguments);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, arguments);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, arguments);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, arguments);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, arguments);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, arguments);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, arguments);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, arguments);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, arguments);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, arguments);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, arguments);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, arguments);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, arguments);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes, arguments);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, arguments);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives, arguments);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, arguments);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle, arguments);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, arguments);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, arguments);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, arguments);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch(ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, arguments);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, arguments);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, arguments);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n/**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, callback = false)\n    {\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options);\n\n        if(![ 'BANDWIDTH', 'ENERGY' ].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {},  callback = false)\n    {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        \n        if(typeof options === 'string')\n            options = { privateKey: options };\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, arguments);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, arguments);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals, arguments);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters, arguments);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({ chainParameter = [] }) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, arguments);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, arguments);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            value: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between tokens.\n     */\n    exchangeCreate(ownerAddress = false,\n                   firstTokenID, firstTokenBalance,\n                   secondTokenID, secondTokenBalance, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, arguments);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(firstTokenID) || !firstTokenID.length\n            || !utils.isString(secondTokenID) || !secondTokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: firstTokenID,\n            first_token_balance: firstTokenBalance,\n            second_token_id: secondTokenID,\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Exchanges a transaction.\n     */\n    exchangeTransaction(ownerAddress = false, exchangeID, tokenID, quant, expected, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, arguments);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if (!utils.isInteger(quant) || quant <= 0)\n            return callback('Invalid quantity provided');\n\n        if (!utils.isInteger(expected) || expected < 0)\n            return callback('Invalid expected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: exchangeID,\n            token_id: tokenID,\n            quant,\n            expected\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges, arguments);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({ exchanges = [] }) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n};\n","import utils from 'utils';\nimport Promisable from 'utils/Promisable';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method extends Promisable{\n    constructor(contract, abi) {\n        super();\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if (types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n\n            if (types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(/^(41)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback)\n            return this.injectPromise(this._call, arguments);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, arguments);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n                \n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport Promisable from 'utils/Promisable';\n\nexport default class Contract extends Promisable{\n    constructor(tronWeb = false, abi = [], address = false) {\n        super();\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, arguments);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, arguments);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport Promisable from 'utils/Promisable';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\n\nimport { keccak256 } from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress', \n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.utils = utils;\n\n        this.injectPromise = Promisable.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([ false, 'latest', 'earliest', 0 ].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n            \n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, sinceTimestamp = 0, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, arguments);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?since=${sinceTimestamp}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, arguments);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/,'41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        hex = hex.replace(/^0x/,'');\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected, arguments);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}